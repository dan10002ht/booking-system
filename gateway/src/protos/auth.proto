syntax = "proto3";

package auth;

service AuthService {
  // Core authentication methods (what gateway needs)
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc RegisterWithEmail(RegisterWithEmailRequest) returns (RegisterResponse);
  rpc RegisterWithOAuth(RegisterWithOAuthRequest) returns (RegisterResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  rpc Logout(LogoutRequest) returns (LogoutResponse);
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
  rpc Health(HealthRequest) returns (HealthResponse);
}

// Registration
message RegisterRequest {
  string email = 1;
  string password = 2;
  string first_name = 3;
  string last_name = 4;
  string phone = 5;
  string role = 6;
}

message RegisterWithEmailRequest {
  string email = 1;
  string password = 2;
  string username = 3;
  string first_name = 4;
  string last_name = 5;
  string phone = 6;
  string role = 7; // "user", "organization", "admin"
  OrganizationData organization = 8;
  string ip_address = 9;
  string user_agent = 10;
}

message RegisterWithOAuthRequest {
  string provider = 1; // "google", "facebook", "github"
  string token = 2;
  string access_token = 3;
  string refresh_token = 4;
  int64 expires_at = 5;
  string ip_address = 6;
  string user_agent = 7;
}

message OrganizationData {
  string name = 1;
  string description = 2;
  string website_url = 3;
  string logo_url = 4;
  string tax_id = 5;
  string business_license = 6;
  string contact_person = 7;
  string contact_phone = 8;
  string contact_email = 9;
  string address = 10;
  string city = 11;
  string state = 12;
  string country = 13;
  string postal_code = 14;
}

message RegisterResponse {
  bool success = 1;
  string message = 2;
  User user = 3;
  string access_token = 4;
  string refresh_token = 5;
  string auth_type = 6; // "email" or "oauth"
  bool is_new_user = 7; // true for new OAuth users
  OrganizationData organization = 8;
}

// Login
message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  bool success = 1;
  string message = 2;
  User user = 3;
  string access_token = 4;
  string refresh_token = 5;
}

// Token management
message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  bool success = 1;
  string message = 2;
  string access_token = 3;
  string refresh_token = 4;
}

message LogoutRequest {
  string refresh_token = 1;
}

message LogoutResponse {
  bool success = 1;
  string message = 2;
}

// Token validation
message ValidateTokenRequest {
  string token = 1;
}

message ValidateTokenResponse {
  bool valid = 1;
  User user = 2;
}

// User data (simplified for gateway needs)
message User {
  string id = 1;
  string email = 2;
  string first_name = 3;
  string last_name = 4;
  string phone = 5;
  bool is_active = 6;
  bool is_verified = 7;
  string role = 8;
  repeated string permissions = 9;
}

// Health check
message HealthRequest {}

message HealthResponse {
  string status = 1;
  string timestamp = 2;
} 